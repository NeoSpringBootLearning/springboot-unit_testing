plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.7'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'io.gatling.gradle' version '3.9.2.1'
}

group = 'com.example.demo'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'
//	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.apache.commons:commons-collections4:4.4'
	implementation 'io.gatling.highcharts:gatling-charts-highcharts:3.11.5'
	implementation 'io.gatling:gatling-app:3.11.5'
	implementation 'io.gatling:gatling-core:3.11.5'
//	implementation ('com.github.javafaker:javafaker:1.0.2') { exclude module: 'org.yaml' }
//	implementation group: 'org.yaml', name: 'snakeyaml', version: '2.2'
	testImplementation('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }
    testImplementation('org.yaml:snakeyaml:2.0')
}
task loadTest(type: JavaExec) {
   dependsOn testClasses
   description = "Load Test With Gatling"
   group = "Load Test"
   classpath = sourceSets.test.runtimeClasspath
   jvmArgs = [
        "-Dgatling.core.directory.binaries=${sourceSets.test}"
   ]
   main = "io.gatling.app.Gatling"
   args = [
           "--simulation", "com.example.demo.EmployeeCreateSimulation",
           "--results-folder", "${buildDir}/gatling-results",
           "--binaries-folder", sourceSets.test.output.classesDir.toString(),
           "--bodies-folder", sourceSets.test.resources.srcDirs.toList().first().toString() + "/gatling/bodies",
   ]
}


tasks.named('test') {
	useJUnitPlatform()
}
